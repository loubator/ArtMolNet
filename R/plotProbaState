plotProbaState<-function(Species=Species,TotAttractors=TotAttractors){
  if(!all(Species%in%colnames(TotAttractors$TotAttractors))){
    stop("Species selected not in the network")
  }
  
  ProbaState<-function(TotAttractors,Ospecies){
    MAX<-max(unlist(lapply(TotAttractors$LAttractors,nrow)))
    LAttractors<-lapply(TotAttractors$LAttractors,function(x){
      x<-x[,Ospecies]
      x<-c(x,rep(x[length(x)], MAX-length(x))) # repeat the last state
    })
    LAttractors<-do.call("rbind",LAttractors)
    #dim(LAttractors)
    Percent<-colSums(LAttractors)/nrow(LAttractors)
      return(Percent)
  }  
  
  SpeciesActivity<-sapply(Species,function(x){
    ProbaState(TotAttractors,Ospecies = x)
  })
  z2<-apply(SpeciesActivity,2,function(h)smooth.spline(h,df = 20)$y)
  Latt<-length(list.files(getwd(),pattern =  "Species_activities"))
  NAME<-paste("Species_activities",Latt+1,sep = "")
  pdf(paste(getwd(),"/",NAME,".pdf",sep = ""))
  par(mar=c(5,4,4,8)) #No margin on the right side
  matplot(z2,type='l',axes=F,ylab = "Probability of activity",xlab = "Time",main="Simulations")
  arrows(x0 = 0,y0 = -0.05,x1 = nrow(z2),y1 = -0.05,length = 0.2,xpd=T)
  axis(2,las=2)
  par(new=T)
  par(mar=c(5,8,4,2)) #No margin on the left side
  plot(c(0,1),type="n", axes=F, xlab="", ylab="")
  legend("right", colnames(z2),col=seq_len(ncol(z2)),lty=seq_len(ncol(z2)),cex=0.4)
  dev.off()
  return(SpeciesActivity)
}
